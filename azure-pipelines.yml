# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - Deploy

pool:
  vmImage: ubuntu-latest

variables:
  azureContainerRegistry: '{"loginServer":"eshopmy01acr.azurecr.io", "id" : "/subscriptions/58dcbdb3-5925-4942-8bf3-c9049c2435e4/resourceGroups/eShop/providers/Microsoft.ContainerRegistry/registries/eShopMy01ACR"}'
  azureSubscriptionEndpoint: 'Visual Studio Professional Subscription (58dcbdb3-5925-4942-8bf3-c9049c2435e4)'

steps:
- script: eShopOnContainersBuildAndDeploy
  displayName: 'eShopOnContainersBuildAndDeploy'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)
    dockerComposeFile: '**/docker-compose.yml'
    action: Build services

- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistry)
    dockerComposeFile: '**/docker-compose.yml'
    action: Push services

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/deploy/k8s/helm'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy/k8s/helm'
    OverWrite: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy/k8s/helm'
    ArtifactName: 'helm'
    publishLocation: 'Container'
